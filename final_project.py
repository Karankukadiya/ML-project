# -*- coding: utf-8 -*-
"""Final_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ATVQkSx5Qma3hVy3qjxGsI4KIpu48WDy

# Import necessary libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Machine Learning (Linear Regression & Preprocessing)
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

import joblib
import pickle
import streamlit as st

"""# Load Data"""

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("Ahmedabad_flat_price_dataset.csv")

df.head()

df.tail()

df.shape

"""# Data Preprocessing"""

print(df.isnull().sum())

print(df.dtypes)

sns.boxplot(df['Price'])

"""# Exploratory Data Analysis (EDA)"""

df.info()

df.describe()

# price distribution
sns.histplot(df['Price'], kde=True)
plt.title("Price Distribution")
plt.show()

"""# Split the data into train data and test data"""

# Features (X) and Target (y)
X = df[['size_sqft', 'Bedrooms', 'Location_Index', 'Age_years']]
y = df['Price']

# Split into 80% training and 20% testing data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Training data size:", X_train.shape)
print("Testing data size:", X_test.shape)

"""# Train the Model"""

# Create Linear Regression model
model = LinearRegression()

# Train (fit) the model on training data
model.fit(X_train, y_train)

print("Intercept:", model.intercept_)
print("Coefficients:", model.coef_)

"""# Model Evaluation"""

# Predict on test data
y_pred = model.predict(X_test)

# Calculate evaluation metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Absolute Error (MAE):", mae)
print("Root Mean Squared Error (RMSE):", rmse)
print("RÂ² Score:", r2)

"""# visualize predicted vs actual prices"""

# Scatter plot of Actual vs Predicted Prices
plt.scatter(y_test, y_pred, color='blue', label="Predicted vs Actual")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--', label="Perfect Prediction Line")

plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Prices")
plt.legend()
plt.show()

"""# Save the Model"""

# Save the trained model to a file
joblib.dump(model, "house_price_model.pkl")
print("Model saved successfully!")

"""# Load the Model"""

# Load the saved model
loaded_model = joblib.load("house_price_model.pkl")

# Test prediction using loaded model
new_data = [[2306, 5, 3, 21]]  # Size=2000 sqft, 3 bedrooms, Location=8, Age=5 years
predicted_price = loaded_model.predict(new_data)
print("Predicted Price:", predicted_price[0])

!pip install streamlit

# Save the model to a .pkl file
with open('model.pkl', 'wb') as file:
    pickle.dump(model, file)

